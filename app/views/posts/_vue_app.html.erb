<div id="app" style="border: 1px solid blue">
  <table>
    <thead>
      <tr>
        <th>Title</th>
        <th>Author</th>
        <th>Content</th>
        <th colspan="3"></th>
      </tr>
    </thead>

    <tbody>
      <tr v-for="post in posts">
        <td>{{ post.title }}</td>
        <td>{{ post.author }}</td>
        <td>{{ post.content }}</td>
        <!--
        <td><a href="{{ post.url | pathTo }}">Show</a></td>
        <td><a href="{{ post.url | pathTo 'edit' }}">Edit</a></td>
        -->
        <td><a @click="showPost($index, post.id)">Show</a></td>
        <td><a @click="editPost($index, post.id)">Edit</a></td>
        <td><button v-on:click="removePost($index, post.id)">X</button></td>
      </tr>
    </tbody>
  </table>

  <hr>

  <div class="add-post">
    <form-component :post="newPost" :state="state">
    </form-component>
  </div>
</div>

<template id="formComponent">
  <form class="" id="" action="" onsubmit="return false;">
    <%= hidden_field_tag :authenticity_token %>
    <input v-model="post.title" placeholder="title">
    <input v-model="post.author" placeholder="author">
    <input v-model="post.content" placeholder="content">
    <button @click="cancel" v-if="post.title">Cancel</button>
    <button @click="addPost" v-if="isAddable">Add</button>
    <button @click="updatePost" v-if="isEdit">Update</button>
  </form>
</template>

<script>
Vue.component('form-component', {
  props: ['post', 'state'],
  template: '#formComponent',
  methods: {
    addPost: function () {
      var that = this;
      var title = this.post.title.trim();
      if (title) {

        this.$http.post('/posts.json', { post: that.post })
          .then(
            function success(res) {
              console.info(res);

              that.$dispatch('list-update');

              that.errors = {}
              that.post = {};
            },
            function error(res) {
              that.errors = res.data.errors
            }
          );
      }
    },

    updatePost: function() {
      var that = this;
      console.log('updatePost', this.post);

      if (this.post.id) {
        this.$http.patch('/posts/' + that.post.id + '.json', { post: that.post })
          .then(
            function success(res) {
              console.info(res);

              that.$dispatch('list-update');

              that.errors = {};
              that.post = {};
              that.state = '';
            },
            function error(res) {
              that.errors = res.data.errors
            }
          );
      }
    },

    cancel: function() {
      this.state = '';
      this.post = {};
    }
  },
  computed: {
    isAddable: function() {
      return this.state !== 'show' && this.state !== 'edit';
    },
    isEdit: function() {
      return this.state === 'edit';
    }
  }
});

Vue.filter('pathTo', function (path, action) {
  // return processed value
  if (!path) return;

  var rtn = path.split('.json');

  if(action === 'edit') {
    rtn.push('/edit');
  }

  return rtn.join();
});

/* Set vue-resource */
Vue.use(VueResource);
Vue.http.interceptors.push((request, next) => {
  request.data.authenticity_token = '<%= form_authenticity_token %>';
  // continue to next interceptor
  next();
});

/* Intial Vue App */
new Vue({
  el: '#app',
  data: {
    newPost: {},
    posts: [
      { title: '---' }
    ],
    state: ''
  },
  created: function() {
    this.fetchPosts();
  },
  methods: {
    fetchPosts: function() {
      var that = this;
      this.$http.get('/posts.json')
        .then(
          function success(res) {
            console.info(res);
            console.info('fetch_data: ', res.data);

            that.errors = {}
            that.posts = res.data;
            that.newPost = {};
          },
          function error(res) {
            that.errors = res.data.errors
          }
        )
    },

    showPost: function(index, post_id) {
      this.state = 'show';
      this.newPost = this.posts[index];
      console.log('showPost');
    },

    editPost: function(index, post_id) {
      this.state = 'edit';
      this.newPost = Object.assign({}, this.posts[index])
      console.log('editPost', this.newPost);
    },

    removePost: function (index, post_id) {
      var that = this;

      console.warn('removePost: ', index, post_id);

      if (post_id) {
        this.$http.delete('/posts/' + post_id + '.json', { /* post: { title: title, author: 'ralph', content: content }, */ })
          .then(
            function success(res) {
              console.info(res);
              that.errors = {};
              that.posts.splice(index, 1);
            },
            function error(res) {
              that.errors = res.data.errors
            }
          );
      }
    }
  },
  events: {
    'list-update': function() {
      console.log('list-update');
      this.fetchPosts();
    }
  }
})
</script>